@import "./themes";
/*name things by what they are and what they do SEMANTIC and Kabkacase , not how they look like*/
/* _layout.scss _ in the name of a scss file is a partials and indicates to scss transpilers to not convert to css
    because these files are made to be imported by another scss file*/

/*coments string interpolation with #{hue(green)} the output of this in CSS coment would be 120deg*/

/* Custom properties/variables  */
/*
$error_color: #FF0000 !default; /*this is a scss global variable
!default; this word indicates that if the variable has been inizialited before it wont overrifding 
if the variable has not been declared sets the default indicated value

The variables inside a block have their own scope
We can save in a variable everything valid CSS value ex. 15px, space-between, #000, etc... and strings, booleans, lists, and maps.
Is recomended to have a partial excusive for global variables
lists can save rule values like shadow or gradient params and you can create a list of list ex. (to 1,2),(to 14,16)

https://codepen.io/jen4web/post/rwd20readinglist CSS check out
*/ 
:root {// root means global varaibles (html tag)
    --main-white: #f0f0f0;//CSS variables syntax
    --main-red: #81bdbd;
    --main-blue: #586279;
    --main-gray: #7d8c9e;
  }
  
  /* Base reset */
  * {
    margin: 0;
    padding: 0;
  }
  

  /*Con esta regla le decimos a todos los elemento que sean border-box  
  incluyendo lo que esta los elementos en lgares de before and after muy bueno para temas y componentes*/
  *,  *::before,  *::after {
    box-sizing: inherit; 
  }

  html {
    box-sizing: border-box; /*Aqui indicamos que tenemos que incluir el borde en el tama√±o de la caja model-box*/
  
    /* Set font size for easy rem calculations in this proyect 1rem = 10px
     * default document font size = 16px, 1rem = 16px, 100% = 16px
     * (100% / 16px) * 10 = 62.5%, 1rem = 10px, 62.5% = 10px
    */
    font-size: 62.5%;
    scroll-behavior: smooth; /*Scroll suavecito :3 */
  }

  /*MIXINS allow us to reuse sets of style rules, a function thath returns style, @include is the word to consume a @mixin
  * _mixins.scss is recomend to separate in their own file, like _variables.scss and always bundle variables first
  * mixin = style block{}
  * ex. 

  @text-color($color){              //We can use a default calue ex @text-color($color: green){}
    color: $color;
  }

  div{
    @include text-color($white);
    background: black;
  }


  /*PLACEHOLDERS not recomend 3 leves deep this creates parents to simulate the mixin effect*/
  /*@extend is equal to include the only diference is the CSS output that not repeat the code in each block where is called
   
  %text-color{              //WThis is a Placeholder and @extends used to share code as mixin but more efficient
    color: white;                    just use when no variables are involved      
  }

   div{
    @extend $text-color;     //This won't copy the code in CSS only will, create selectors and nest
    background: black;
  }



  /*You can use @if for condition stylle blocks*/
  /*@for iterates numbers. used to create repetitive rules ex. sizes, margin
    @each iterates lists, a variable type. used to create similar rules that only changes a variable ex. colors)*/

  /* Recmondeation use mixins for media querys
  */


/*Functons to create colors in the DOCs*/
/*Custom function to solve some calculations have a @return mor info DOCs*/

/*MAPS
Are key value pair like a JSON used for create Themes passing the key to the
ex.
color: map-get($my-map, $key-value); this asign the value taht correspond to the key

*/

  /* Base styles */
  body {
    font-family: 'Poppins', sans-serif;
    font-size: 1.8rem; /* 18px */
    font-weight: 400;
    line-height: 1.4;
    color: map-get($map: $defaultTheme, $key:"font-color" );
    //margin: 0px;
    /*
    to the main {
      width: 90%;
      margin: 0 auto;
    }
    **/
  }
  
  h1,
  h2 {
    font-family: 'Raleway', sans-serif;
    font-weight: 700;
    text-align: center;
  }
  
  h1 {
    font-size: 6rem;
  }
  
  h2 {
    font-size: 4.2rem;
  }
  
  ul {
    list-style: none;
  }
  
  a {
    text-decoration: none;
    color: $fontColorDefaultTheme;
  }
  
  img {
    display: block;
    width: 100%;
  }